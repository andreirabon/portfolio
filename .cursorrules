{
  "rules": {
    "dependency_management": {
      "description": "Package and Dependency Management",
      "enabled": true,
      "rules": [
        {
          "description": "Always check package.json before suggesting to install any package",
          "steps": [
            "Search package.json for the package name",
            "Check both dependencies and devDependencies sections",
            "Only suggest installation if the package is not already present",
            "If found, note the existing version for compatibility"
          ]
        }
      ]
    },
    "expertise": {
      "description": "You are a senior react frontend developer who is an expert in using HTML, CSS, JavaScript, TypeScript, React, ArkType, Tailwind CSS, shadcn/ui, PHP, Laravel, Blade, uses a Windows 11 operating system, and follows best practices for coding.",
      "enabled": true
    },
    "code_style": {
      "description": "Code Style and Structure guidelines",
      "enabled": true,
      "rules": [
        {
          "description": "Generate code, corrections, and refactorings that comply with the basic principles and nomenclature."
        },
        {
          "description": "Write concise, technical TypeScript code with accurate examples."
        },
        {
          "description": "Use functional and declarative programming patterns; avoid classes."
        },
        {
          "description": "Prefer iteration and modularization over code duplication."
        },
        {
          "description": "Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)."
        },
        {
          "description": "Structure files: exported component, subcomponents, helpers, static content, types."
        }
      ]
    },
    "development_workflow": {
      "description": "Development Workflow Best Practices",
      "enabled": true,
      "rules": [
        {
          "description": "Start simple and add complexity incrementally."
        },
        {
          "description": "Consult documentation before implementing custom solutions."
        },
        {
          "description": "Use framework conventions and built-in features when available."
        },
        {
          "description": "Test schema changes in development before production."
        }
      ]
    },
    "naming_conventions": {
      "description": "Naming Conventions",
      "enabled": true,
      "rules": [
        {
          "description": "Use kebab-case for directories."
        },
        {
          "description": "Use camelCase for variables and functions."
        },
        {
          "description": "Use PascalCase for components."
        },
        {
          "description": "File names for components should be in PascalCase. Rest of the files in kebab-case."
        },
        {
          "description": "Prefix component names with their type (e.g. ButtonAccount.jsx and ButtonSignin.jsx, CardAnalyticsMain jsx and CardAnalyticsData.jsx, etc.)"
        }
      ]
    },
    "typescript_usage": {
      "description": "TypeScript Usage",
      "enabled": true,
      "rules": [
        {
          "description": "Use TypeScript for all code; prefer interfaces over types."
        },
        {
          "description": "Use ArkType for type checking and validation; When using arktype in React components, define the type schema, infer its type, pass raw props to the component, validate and destructure them using schema.assert(props) with default values, and use the validated props in the JSX."
        },
        {
          "description": "Avoid enums; use maps instead."
        },
        {
          "description": "Use functional components with TypeScript interfaces."
        },
        {
          "description": "Enable strict mode in TypeScript for better type safety."
        },
        {
          "description": "Disallow use of 'any' and unsafe type assertions."
        },
        {
          "description": "Enforce 'noImplicitAny' and 'strictNullChecks' in tsconfig.json."
        }
      ]
    },
    "syntax_formatting": {
      "description": "Syntax and Formatting",
      "enabled": true,
      "rules": [
        {
          "description": "Use the 'function' keyword for pure functions."
        },
        {
          "description": "Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements."
        },
        {
          "description": "Use declarative JSX."
        }
      ]
    },
    "ui_styling": {
      "description": "UI and Styling",
      "enabled": true,
      "rules": [
        {
          "description": "Use shadcn/ui and Tailwind CSS version 4.x for components and styling."
        },
        {
          "description": "Implement responsive design with Tailwind CSS version 4.x; use a mobile-first approach."
        }
      ]
    },
    "performance": {
      "description": "Performance Optimization",
      "enabled": true,
      "rules": [
        {
          "description": "Split client components in Suspense with fallback."
        },
        {
          "description": "Use dynamic loading for non-critical components."
        },
        {
          "description": "Optimize images: use WebP format, include size data, implement lazy loading."
        },
        {
          "description": "Optimize Largest Contentful Paint (LCP)",
          "steps": [
            "Prioritize loading of above-the-fold content and critical CSS.",
            "Defer non-critical JS and CSS using dynamic imports and Suspense.",
            "Use <img> with loading='lazy' for below-the-fold images; avoid for LCP image.",
            "Serve LCP images in WebP format with explicit width/height and priority loading.",
            "Minimize server response time for LCP element (see TTFB)."
          ]
        },
        {
          "description": "Optimize Interaction to Next Paint (INP)",
          "steps": [
            "Debounce or throttle input handlers for high-frequency events.",
            "Use React.useTransition for non-blocking state updates.",
            "Avoid synchronous, blocking JS in event handlers.",
            "Split large components and use React.lazy for non-critical UI."
          ]
        },
        {
          "description": "Optimize Cumulative Layout Shift (CLS)",
          "steps": [
            "Always set explicit width and height for images, videos, and embeds.",
            "Avoid inserting content above existing content except for user-initiated actions.",
            "Reserve space for dynamic content (e.g., skeleton loaders, aspect-ratio utilities).",
            "Never use layout-shifting ads or popups."
          ]
        },
        {
          "description": "Optimize First Contentful Paint (FCP)",
          "steps": [
            "Minimize main bundle size; use code splitting and tree shaking.",
            "Inline critical CSS for above-the-fold content.",
            "Preload key fonts and critical resources.",
            "Avoid render-blocking scripts/styles."
          ]
        },
        {
          "description": "Optimize Time to First Byte (TTFB)",
          "steps": [
            "Use server-side caching for HTML and API responses.",
            "Minimize server-side computation in SSR/SSG.",
            "Use CDN for static assets and edge functions where possible.",
            "Monitor and alert on backend latency."
          ]
        },
        {
          "description": "Optimize First Input Delay (FID)",
          "steps": [
            "Keep main thread free during initial load; avoid heavy JS execution.",
            "Defer non-essential JS with async/defer or dynamic import.",
            "Use web workers for heavy computation.",
            "Minimize third-party scripts."
          ]
        },
        {
          "description": "Web Vitals Measurement and Regression Prevention",
          "steps": [
            "Instrument Web Vitals measurement in development and production using web-vitals library.",
            "Fail CI if any Web Vital exceeds defined thresholds.",
            "Log and monitor Web Vitals in production (e.g., via Google Analytics or custom endpoint)."
          ]
        }
      ]
    },
    "documentation": {
      "description": "Documentation",
      "enabled": true,
      "rules": [
        {
          "description": "Always check latest documentation first for framework-specific features and conventions."
        },
        {
          "description": "Follow React version latest documentation for Rendering. The link for the documentation is https://react.dev/learn"
        },
        {
          "description": "Follow TanStack Query latest documentation for data fetching. The link for the documentation is https://tanstack.com/query/latest/docs/"
        },
        {
          "description": "Follow TanStack Router latest documentation for routing. The link for the documentation is https://tanstack.com/router/latest/docs/"
        },
        {
          "description": "Follow Tailwind CSS latest documentation for styling. The link for the documentation is https://tailwindcss.com/docs/"
        },
        {
          "description": "Follow shadcn/ui latest documentation for components. The link for the documentation is https://ui.shadcn.com/docs"
        },
        {
          "description": "Follow ArkType latest documentation for type checking and validation. The link for the documentation is https://arktype.io/docs"
        }
      ]
    },
    "testing": {
      "description": "Testing and Code Quality",
      "enabled": true,
      "rules": [
        {
          "description": "All new code must include unit tests with at least 90% coverage, measured by Vitest.",
          "steps": [
            "Write unit tests for all new functions and components.",
            "Measure coverage using Vitest.",
            "Fail CI if coverage drops below 90%."
          ]
        },
        {
          "description": "All UI components must be accessible via keyboard and screen readers.",
          "steps": [
            "Test components with axe-core.",
            "Fix all critical and serious accessibility violations before merging."
          ]
        },
        {
          "description": "Write integration and E2E tests for critical user flows."
        },
        {
          "description": "Test error and edge cases for all exported functions/components."
        },
        {
          "description": "Ensure test isolation and cleanup."
        }
      ]
    },
    "error_handling": {
      "description": "Error Handling",
      "enabled": true,
      "rules": [
        {
          "description": "Use error boundaries for all React subtrees."
        },
        {
          "description": "Log errors with context; never swallow errors silently."
        },
        {
          "description": "Provide user feedback for all recoverable errors."
        }
      ]
    }
  }
}
